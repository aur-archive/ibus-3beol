diff -ruN ibus-ibus-533dfc2/bus/ibusimpl.c ibus-ibus-23abee8/bus/ibusimpl.c
--- ibus-ibus-533dfc2/bus/ibusimpl.c	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/bus/ibusimpl.c	2011-11-21 11:06:21.000000000 +0900
@@ -1044,18 +1044,19 @@
 }
 
 /**
- * bus_ibus_impl_context_request_next_engine_in_menu:
+ * bus_ibus_impl_context_request_rotate_engine_in_menu:
  *
- * Process the "next_engine_in_menu" hotkey.
+ * Process the "next_engine_in_menu" or "previous_engine" hotkey.
  */
 static void
-bus_ibus_impl_context_request_next_engine_in_menu (BusIBusImpl     *ibus,
-                                                   BusInputContext *context)
+bus_ibus_impl_context_request_rotate_engine_in_menu (BusIBusImpl     *ibus,
+                                                     BusInputContext *context,
+                                                     gboolean         is_next)
 {
     BusEngineProxy *engine;
     IBusEngineDesc *desc;
     IBusEngineDesc *next_desc = NULL;
-    GList *p;
+    GList *p = NULL;
 
     engine = bus_input_context_get_engine (context);
     if (engine == NULL) {
@@ -1071,12 +1072,45 @@
 
     p = g_list_find (ibus->register_engine_list, desc);
     if (p != NULL) {
-        p = p->next;
+        if (is_next) {
+            p = p->next;
+        } else {
+            p = p->prev;
+        }
+    }
+
+    /* Rotate register_engine_list and engine_list. */
+    if (p == NULL && g_list_find (ibus->register_engine_list, desc) != NULL) {
+        if (is_next) {
+            p = ibus->engine_list;
+        } else {
+            p = g_list_last (ibus->engine_list);
+        }
     }
+
     if (p == NULL) {
         p = g_list_find (ibus->engine_list, desc);
         if (p != NULL) {
-            p = p->next;
+            if (is_next) {
+                p = p->next;
+            } else {
+                p = p->prev;
+            }
+        }
+    }
+
+    /* Rerotate register_engine_list and engine_list. */
+    if (p == NULL && g_list_find (ibus->engine_list, desc) != NULL) {
+        if (is_next) {
+            p = ibus->register_engine_list;
+            if (p == NULL) {
+                p = ibus->engine_list;
+            }
+        } else {
+            p = g_list_last (ibus->register_engine_list);
+            if (p == NULL) {
+                p = g_list_last (ibus->engine_list);
+            }
         }
     }
 
@@ -1126,12 +1160,9 @@
         }
     }
 
-    /*
-     * If the previous engine name is not found, switch to the next engine
-     * in the menu. This behavior is better than doing nothing.
-     */
     if (!engine_name) {
-        bus_ibus_impl_context_request_next_engine_in_menu (ibus, context);
+        bus_ibus_impl_context_request_rotate_engine_in_menu (ibus, context,
+                                                             FALSE);
         return;
     }
 
@@ -2066,25 +2097,26 @@
         else {
             bus_input_context_enable (context);
         }
-        return (enabled != bus_input_context_is_enabled (context));
+        return TRUE;
     }
     if (event == enable_unconditional) {
         gboolean enabled = bus_input_context_is_enabled (context);
         if (!enabled) {
             bus_input_context_enable (context);
         }
-        return bus_input_context_is_enabled (context);
+        return TRUE;
     }
     if (event == disable_unconditional) {
         gboolean enabled = bus_input_context_is_enabled (context);
         if (enabled) {
             bus_input_context_disable (context);
         }
-        return !bus_input_context_is_enabled (context);
+        return TRUE;
     }
     if (event == next) {
         if (bus_input_context_is_enabled (context)) {
-            bus_ibus_impl_context_request_next_engine_in_menu (ibus, context);
+            bus_ibus_impl_context_request_rotate_engine_in_menu (ibus, context,
+                                                                 TRUE);
         }
         else {
             bus_input_context_enable (context);
diff -ruN ibus-ibus-533dfc2/client/gtk2/ibusimcontext.c ibus-ibus-23abee8/client/gtk2/ibusimcontext.c
--- ibus-ibus-533dfc2/client/gtk2/ibusimcontext.c	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/client/gtk2/ibusimcontext.c	2011-11-21 11:06:21.000000000 +0900
@@ -734,6 +734,19 @@
     if (ibusimcontext->has_focus)
         return;
 
+    /* don't set focus on password entry */
+    if (ibusimcontext->client_window != NULL) {
+        GtkWidget *widget;
+
+        gdk_window_get_user_data (ibusimcontext->client_window,
+                                  (gpointer *)&widget);
+
+        if (GTK_IS_ENTRY (widget) &&
+            !gtk_entry_get_visibility (GTK_ENTRY (widget))) {
+            return;
+        }
+    }
+
     if (_focus_im_context != NULL) {
         g_assert (_focus_im_context != context);
         gtk_im_context_focus_out (_focus_im_context);
diff -ruN ibus-ibus-533dfc2/client/gtk3/ibusimcontext.c ibus-ibus-23abee8/client/gtk3/ibusimcontext.c
--- ibus-ibus-533dfc2/client/gtk3/ibusimcontext.c	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/client/gtk3/ibusimcontext.c	2011-11-21 11:06:21.000000000 +0900
@@ -734,6 +734,19 @@
     if (ibusimcontext->has_focus)
         return;
 
+    /* don't set focus on password entry */
+    if (ibusimcontext->client_window != NULL) {
+        GtkWidget *widget;
+
+        gdk_window_get_user_data (ibusimcontext->client_window,
+                                  (gpointer *)&widget);
+
+        if (GTK_IS_ENTRY (widget) &&
+            !gtk_entry_get_visibility (GTK_ENTRY (widget))) {
+            return;
+        }
+    }
+
     if (_focus_im_context != NULL) {
         g_assert (_focus_im_context != context);
         gtk_im_context_focus_out (_focus_im_context);
diff -ruN ibus-ibus-533dfc2/client/x11/main.c ibus-ibus-23abee8/client/x11/main.c
--- ibus-ibus-533dfc2/client/x11/main.c	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/client/x11/main.c	2011-11-21 11:06:21.000000000 +0900
@@ -116,6 +116,8 @@
 
 static IBusBus *_bus = NULL;
 
+static gboolean _use_sync_mode = FALSE;
+
 static void
 _xim_preedit_start (XIMS xims, const X11IC *x11ic)
 {
@@ -443,6 +445,31 @@
 
 }
 
+static void
+_process_key_event_done (GObject      *object,
+                         GAsyncResult *res,
+                         gpointer      user_data)
+{
+    IBusInputContext *context = (IBusInputContext *)object;
+    IMForwardEventStruct *pfe = (IMForwardEventStruct*) user_data;
+
+    GError *error = NULL;
+    gboolean retval = ibus_input_context_process_key_event_async_finish (
+            context,
+            res,
+            &error);
+
+    if (error != NULL) {
+        g_warning ("Process Key Event failed: %s.", error->message);
+        g_error_free (error);
+    }
+
+    if (retval == FALSE) {
+        IMForwardEvent (_xims, (XPointer) pfe);
+    }
+    g_slice_free (IMForwardEventStruct, pfe);
+}
+
 static int
 xim_forward_event (XIMS xims, IMForwardEventStruct *call_data)
 {
@@ -469,30 +496,57 @@
     if (event.type == GDK_KEY_RELEASE) {
         event.state |= IBUS_RELEASE_MASK;
     }
-    retval = ibus_input_context_process_key_event (x11ic->context,
-                                                   event.keyval,
-                                                   event.hardware_keycode - 8,
-                                                   event.state);
-    if (retval) {
-        if (! x11ic->has_preedit_area) {
-            _xim_set_cursor_location (x11ic);
+
+    if (_use_sync_mode) {
+        retval = ibus_input_context_process_key_event (
+                                      x11ic->context,
+                                      event.keyval,
+                                      event.hardware_keycode - 8,
+                                      event.state);
+        if (retval) {
+            if (! x11ic->has_preedit_area) {
+                _xim_set_cursor_location (x11ic);
+            }
+            return 1;
         }
-        return 1;
-    }
 
-    IMForwardEventStruct fe;
-    memset (&fe, 0, sizeof (fe));
+        IMForwardEventStruct fe;
+        memset (&fe, 0, sizeof (fe));
 
-    fe.major_code = XIM_FORWARD_EVENT;
-    fe.icid = x11ic->icid;
-    fe.connect_id = x11ic->connect_id;
-    fe.sync_bit = 0;
-    fe.serial_number = 0L;
-    fe.event = call_data->event;
+        fe.major_code = XIM_FORWARD_EVENT;
+        fe.icid = x11ic->icid;
+        fe.connect_id = x11ic->connect_id;
+        fe.sync_bit = 0;
+        fe.serial_number = 0L;
+        fe.event = call_data->event;
 
-    IMForwardEvent (_xims, (XPointer) &fe);
+        IMForwardEvent (_xims, (XPointer) &fe);
 
-    return 1;
+        retval = 1;
+    }
+    else {
+        IMForwardEventStruct *pfe;
+
+        pfe = g_slice_new0 (IMForwardEventStruct);
+        pfe->major_code = XIM_FORWARD_EVENT;
+        pfe->icid = x11ic->icid;
+        pfe->connect_id = x11ic->connect_id;
+        pfe->sync_bit = 0;
+        pfe->serial_number = 0L;
+        pfe->event = call_data->event;
+
+        ibus_input_context_process_key_event_async (
+                                      x11ic->context,
+                                      event.keyval,
+                                      event.hardware_keycode - 8,
+                                      event.state,
+                                      -1,
+                                      NULL,
+                                      _process_key_event_done,
+                                      pfe);
+        retval = 1;
+    }
+    return retval;
 }
 
 
@@ -897,6 +951,25 @@
     _xim_preedit_end (_xims, x11ic);
 }
 
+static gboolean
+_get_boolean_env(const gchar *name,
+                 gboolean     defval)
+{
+    const gchar *value = g_getenv (name);
+
+    if (value == NULL)
+      return defval;
+
+    if (g_strcmp0 (value, "") == 0 ||
+        g_strcmp0 (value, "0") == 0 ||
+        g_strcmp0 (value, "false") == 0 ||
+        g_strcmp0 (value, "False") == 0 ||
+        g_strcmp0 (value, "FALSE") == 0)
+      return FALSE;
+
+    return TRUE;
+}
+
 static void
 _init_ibus (void)
 {
@@ -909,6 +982,8 @@
 
     g_signal_connect (_bus, "disconnected",
                         G_CALLBACK (_bus_disconnected_cb), NULL);
+
+    _use_sync_mode = _get_boolean_env ("IBUS_ENABLE_SYNC_MODE", FALSE);
 }
 
 static void
diff -ruN ibus-ibus-533dfc2/ibus/_config.py.in ibus-ibus-23abee8/ibus/_config.py.in
--- ibus-ibus-533dfc2/ibus/_config.py.in	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/ibus/_config.py.in	2011-11-21 11:06:21.000000000 +0900
@@ -45,10 +45,14 @@
 
 def get_ICON_KEYBOARD():
     import gtk
-    theme = gtk.icon_theme_get_default()
     icon = '@IBUS_ICON_KEYBOARD@'
+    fallback_icon = 'ibus-keyboard'
+    settings = gtk.settings_get_default()
+    if settings.get_property('gtk-icon-theme-name') != 'gnome':
+        return fallback_icon
+    theme = gtk.icon_theme_get_default()
     if not theme.lookup_icon(icon, 18, 0):
-        icon = 'ibus-keyboard'
+        return fallback_icon
     return icon
 
 ISOCODES_PREFIX='@ISOCODES_PREFIX@'
diff -ruN ibus-ibus-533dfc2/src/ibus.h ibus-ibus-23abee8/src/ibus.h
--- ibus-ibus-533dfc2/src/ibus.h	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/src/ibus.h	2011-11-21 11:06:21.000000000 +0900
@@ -52,6 +52,7 @@
 #include <ibusconfig.h>
 #include <ibusconfigservice.h>
 #include <ibuspanelservice.h>
+#include <ibusutil.h>
 
 #undef __IBUS_H_INSIDE__
 
diff -ruN ibus-ibus-533dfc2/ui/gtk/main.py ibus-ibus-23abee8/ui/gtk/main.py
--- ibus-ibus-533dfc2/ui/gtk/main.py	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/ui/gtk/main.py	2011-11-21 11:06:21.000000000 +0900
@@ -86,6 +86,9 @@
             pass
 
 def launch_panel(replace):
+    settings = gtk.settings_get_default()
+    if settings.get_property('gtk-fallback-icon-theme') == None:
+        settings.set_property('gtk-fallback-icon-theme', 'gnome')
     # gtk.settings_get_default().props.gtk_theme_name = "/home/phuang/.themes/aud-Default/gtk-2.0/gtkrc"
     # gtk.rc_parse("./themes/default/gtkrc")
     UIApplication(replace).run()
diff -ruN ibus-ibus-533dfc2/ui/gtk/panel.py ibus-ibus-23abee8/ui/gtk/panel.py
--- ibus-ibus-533dfc2/ui/gtk/panel.py	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/ui/gtk/panel.py	2011-11-21 11:06:21.000000000 +0900
@@ -477,7 +477,7 @@
             menu = gtk.Menu()
             item = gtk.ImageMenuItem(_("No input window"))
             size = gtk.icon_size_lookup(gtk.ICON_SIZE_MENU)
-            item.set_image(_icon.IconWidget("gtk-info", size[0]))
+            item.set_image(_icon.IconWidget("gtk-dialog-info", size[0]))
             menu.add(item)
             menu.show_all()
         else:
diff -ruN ibus-ibus-533dfc2/ui/gtk/toolitem.py ibus-ibus-23abee8/ui/gtk/toolitem.py
--- ibus-ibus-533dfc2/ui/gtk/toolitem.py	2011-09-24 00:11:24.000000000 +0900
+++ ibus-ibus-23abee8/ui/gtk/toolitem.py	2011-11-21 11:06:21.000000000 +0900
@@ -73,11 +73,9 @@
         self.set_icon_name(self._prop.icon)
 
         if self._prop.visible:
-            self.set_no_show_all(False)
-            self.show_all()
+            self.show()
         else:
-            self.set_no_show_all(True)
-            self.hide_all()
+            self.hide()
 
     def do_clicked(self):
         self.emit("property-activate", self._prop.key, self._prop.state)
@@ -128,11 +126,9 @@
         self.set_active(self._prop.state == ibus.PROP_STATE_CHECKED)
         self.set_sensitive(self._prop.sensitive)
         if self._prop.visible:
-            self.set_no_show_all(False)
-            self.show_all()
+            self.show()
         else:
-            self.set_no_show_all(True)
-            self.hide_all()
+            self.hide()
 
     def do_toggled(self):
         # Do not send property-activate to engine in case the event is
